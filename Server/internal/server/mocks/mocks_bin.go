// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/binstor/binstor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBinStrorFunc is a mock of BinStrorFunc interface.
type MockBinStrorFunc struct {
	ctrl     *gomock.Controller
	recorder *MockBinStrorFuncMockRecorder
}

// MockBinStrorFuncMockRecorder is the mock recorder for MockBinStrorFunc.
type MockBinStrorFuncMockRecorder struct {
	mock *MockBinStrorFunc
}

// NewMockBinStrorFunc creates a new mock instance.
func NewMockBinStrorFunc(ctrl *gomock.Controller) *MockBinStrorFunc {
	mock := &MockBinStrorFunc{ctrl: ctrl}
	mock.recorder = &MockBinStrorFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinStrorFunc) EXPECT() *MockBinStrorFuncMockRecorder {
	return m.recorder
}

// GetBinData mocks base method.
func (m *MockBinStrorFunc) GetBinData(userID, storageID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinData", userID, storageID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinData indicates an expected call of GetBinData.
func (mr *MockBinStrorFuncMockRecorder) GetBinData(userID, storageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinData", reflect.TypeOf((*MockBinStrorFunc)(nil).GetBinData), userID, storageID)
}

// RemoveBinData mocks base method.
func (m *MockBinStrorFunc) RemoveBinData(userID, storageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBinData", userID, storageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBinData indicates an expected call of RemoveBinData.
func (mr *MockBinStrorFuncMockRecorder) RemoveBinData(userID, storageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBinData", reflect.TypeOf((*MockBinStrorFunc)(nil).RemoveBinData), userID, storageID)
}

// SaveBinData mocks base method.
func (m *MockBinStrorFunc) SaveBinData(userID, storageID string, binData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBinData", userID, storageID, binData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBinData indicates an expected call of SaveBinData.
func (mr *MockBinStrorFuncMockRecorder) SaveBinData(userID, storageID, binData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBinData", reflect.TypeOf((*MockBinStrorFunc)(nil).SaveBinData), userID, storageID, binData)
}

// UpdateBinData mocks base method.
func (m *MockBinStrorFunc) UpdateBinData(userID, storageID string, binData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinData", userID, storageID, binData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBinData indicates an expected call of UpdateBinData.
func (mr *MockBinStrorFuncMockRecorder) UpdateBinData(userID, storageID, binData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinData", reflect.TypeOf((*MockBinStrorFunc)(nil).UpdateBinData), userID, storageID, binData)
}
