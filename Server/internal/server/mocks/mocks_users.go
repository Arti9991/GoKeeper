// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/pgstor/pgStorUsers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStor is a mock of UserStor interface.
type MockUserStor struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorMockRecorder
}

// MockUserStorMockRecorder is the mock recorder for MockUserStor.
type MockUserStorMockRecorder struct {
	mock *MockUserStor
}

// NewMockUserStor creates a new mock instance.
func NewMockUserStor(ctrl *gomock.Controller) *MockUserStor {
	mock := &MockUserStor{ctrl: ctrl}
	mock.recorder = &MockUserStorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStor) EXPECT() *MockUserStorMockRecorder {
	return m.recorder
}

// CloseUsersDB mocks base method.
func (m *MockUserStor) CloseUsersDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseUsersDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseUsersDB indicates an expected call of CloseUsersDB.
func (mr *MockUserStorMockRecorder) CloseUsersDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseUsersDB", reflect.TypeOf((*MockUserStor)(nil).CloseUsersDB))
}

// GetUser mocks base method.
func (m *MockUserStor) GetUser(userLogin string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userLogin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStorMockRecorder) GetUser(userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStor)(nil).GetUser), userLogin)
}

// SaveNewUser mocks base method.
func (m *MockUserStor) SaveNewUser(userID, userLogin, userPassw string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewUser", userID, userLogin, userPassw)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewUser indicates an expected call of SaveNewUser.
func (mr *MockUserStorMockRecorder) SaveNewUser(userID, userLogin, userPassw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewUser", reflect.TypeOf((*MockUserStor)(nil).SaveNewUser), userID, userLogin, userPassw)
}
